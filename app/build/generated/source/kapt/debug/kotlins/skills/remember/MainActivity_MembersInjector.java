// Generated by Dagger (https://dagger.dev).
package kotlins.skills.remember;

import androidx.lifecycle.ViewModelProvider;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

  public MainActivity_MembersInjector(Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.dispatchingAndroidInjectorProvider = dispatchingAndroidInjectorProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider) {
    return new MainActivity_MembersInjector(viewModelFactoryProvider, dispatchingAndroidInjectorProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectDispatchingAndroidInjector(instance, dispatchingAndroidInjectorProvider.get());
  }

  @InjectedFieldSignature("kotlins.skills.remember.MainActivity.viewModelFactory")
  public static void injectViewModelFactory(MainActivity instance,
      ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  @InjectedFieldSignature("kotlins.skills.remember.MainActivity.dispatchingAndroidInjector")
  public static void injectDispatchingAndroidInjector(MainActivity instance,
      DispatchingAndroidInjector<Object> dispatchingAndroidInjector) {
    instance.dispatchingAndroidInjector = dispatchingAndroidInjector;
  }
}
