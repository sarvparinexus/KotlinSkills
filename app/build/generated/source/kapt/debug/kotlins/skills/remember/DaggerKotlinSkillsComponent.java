// Generated by Dagger (https://dagger.dev).
package kotlins.skills.remember;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.template.core.dataSource.remote.ApiHelper;
import com.example.template.core.dataSource.remote.ApiHelperImpl;
import com.example.template.core.dataSource.remote.ApiHelperImpl_Factory;
import com.example.template.di.modules.ActivityBuilder_MainActivity;
import com.example.template.di.modules.RetrofitModule;
import com.example.template.di.modules.RetrofitModule_GsonFactory;
import com.example.template.di.modules.RetrofitModule_ProvideApiServiceFactory;
import com.example.template.di.modules.RetrofitModule_ProvideOkHttpClientFactory;
import com.example.template.di.modules.RetrofitModule_ProvideRetrofiFactory;
import com.google.gson.Gson;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import kotlins.skills.remember.api.requests.ApiClass.ApiServices;
import kotlins.skills.remember.api.requests.repository.UsersRepository;
import kotlins.skills.remember.api.requests.repository.UsersRepositoryImpl;
import kotlins.skills.remember.api.requests.repository.UsersRepositoryImpl_Factory;
import kotlins.skills.remember.di.dagger.modules.MainFragmentBuilder_HomeFragment;
import kotlins.skills.remember.di.dagger.modules.MainFragmentBuilder_NotificationFragment;
import kotlins.skills.remember.di.dagger.modules.MainFragmentBuilder_RequestConcurrentFragment;
import kotlins.skills.remember.useCase.Dashborad.RequestConcurrentlyFragment;
import kotlins.skills.remember.useCase.Dashborad.RequestConcurrentlyFragment_MembersInjector;
import kotlins.skills.remember.useCase.Dashborad.RequestsConcurrentlyViewModel;
import kotlins.skills.remember.useCase.Dashborad.RequestsConcurrentlyViewModel_Factory;
import kotlins.skills.remember.useCase.Home.HomeFragment;
import kotlins.skills.remember.useCase.Home.HomeFragment_MembersInjector;
import kotlins.skills.remember.useCase.Home.HomeViewModel;
import kotlins.skills.remember.useCase.Home.HomeViewModel_Factory;
import kotlins.skills.remember.useCase.Notification.NotificationViewModel;
import kotlins.skills.remember.useCase.Notification.NotificationViewModel_Factory;
import kotlins.skills.remember.useCase.Notification.NotificationsFragment;
import kotlins.skills.remember.useCase.Notification.NotificationsFragment_MembersInjector;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerKotlinSkillsComponent {
  private DaggerKotlinSkillsComponent() {
  }

  public static KotlinSkillsComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements KotlinSkillsComponent.Builder {
    private Context applicationContext;

    @Override
    public Builder applicationContext(Context context) {
      this.applicationContext = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public KotlinSkillsComponent build() {
      Preconditions.checkBuilderRequirement(applicationContext, Context.class);
      return new KotlinSkillsComponentImpl(new RetrofitModule(), applicationContext);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private MainActivitySubcomponentFactory(KotlinSkillsComponentImpl kotlinSkillsComponentImpl) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
    }

    @Override
    public ActivityBuilder_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(kotlinSkillsComponentImpl, arg0);
    }
  }

  private static final class HomeFragmentSubcomponentFactory implements MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent.Factory {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private HomeFragmentSubcomponentFactory(KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent create(HomeFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeFragmentSubcomponentImpl(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class RequestConcurrentlyFragmentSubcomponentFactory implements MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent.Factory {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private RequestConcurrentlyFragmentSubcomponentFactory(
        KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent create(
        RequestConcurrentlyFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RequestConcurrentlyFragmentSubcomponentImpl(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class NotificationsFragmentSubcomponentFactory implements MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent.Factory {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private NotificationsFragmentSubcomponentFactory(
        KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent create(
        NotificationsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new NotificationsFragmentSubcomponentImpl(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class HomeFragmentSubcomponentImpl implements MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final HomeFragmentSubcomponentImpl homeFragmentSubcomponentImpl = this;

    private HomeFragmentSubcomponentImpl(KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl, HomeFragment arg0Param) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(HomeFragment arg0) {
      injectHomeFragment(arg0);
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectViewModelFactory(instance, kotlinSkillsComponentImpl.kotlinSkillsViewModelFactoryProvider.get());
      HomeFragment_MembersInjector.injectDispatchingAndroidInjector(instance, mainActivitySubcomponentImpl.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class RequestConcurrentlyFragmentSubcomponentImpl implements MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final RequestConcurrentlyFragmentSubcomponentImpl requestConcurrentlyFragmentSubcomponentImpl = this;

    private RequestConcurrentlyFragmentSubcomponentImpl(
        KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl,
        RequestConcurrentlyFragment arg0Param) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(RequestConcurrentlyFragment arg0) {
      injectRequestConcurrentlyFragment(arg0);
    }

    private RequestConcurrentlyFragment injectRequestConcurrentlyFragment(
        RequestConcurrentlyFragment instance) {
      RequestConcurrentlyFragment_MembersInjector.injectViewModelFactory(instance, kotlinSkillsComponentImpl.kotlinSkillsViewModelFactoryProvider.get());
      RequestConcurrentlyFragment_MembersInjector.injectDispatchingAndroidInjector(instance, mainActivitySubcomponentImpl.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class NotificationsFragmentSubcomponentImpl implements MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final NotificationsFragmentSubcomponentImpl notificationsFragmentSubcomponentImpl = this;

    private NotificationsFragmentSubcomponentImpl(
        KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl,
        NotificationsFragment arg0Param) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(NotificationsFragment arg0) {
      injectNotificationsFragment(arg0);
    }

    private NotificationsFragment injectNotificationsFragment(NotificationsFragment instance) {
      NotificationsFragment_MembersInjector.injectDispatchingAndroidInjector(instance, mainActivitySubcomponentImpl.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityBuilder_MainActivity.MainActivitySubcomponent {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private Provider<MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent.Factory> requestConcurrentlyFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent.Factory> notificationsFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(KotlinSkillsComponentImpl kotlinSkillsComponentImpl,
        MainActivity arg0Param) {
      this.kotlinSkillsComponentImpl = kotlinSkillsComponentImpl;

      initialize(arg0Param);

    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, ((Provider) kotlinSkillsComponentImpl.mainActivitySubcomponentFactoryProvider)).put(HomeFragment.class, ((Provider) homeFragmentSubcomponentFactoryProvider)).put(RequestConcurrentlyFragment.class, ((Provider) requestConcurrentlyFragmentSubcomponentFactoryProvider)).put(NotificationsFragment.class, ((Provider) notificationsFragmentSubcomponentFactoryProvider)).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0Param) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_HomeFragment.HomeFragmentSubcomponent.Factory get() {
          return new HomeFragmentSubcomponentFactory(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl);
        }
      };
      this.requestConcurrentlyFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_RequestConcurrentFragment.RequestConcurrentlyFragmentSubcomponent.Factory get(
            ) {
          return new RequestConcurrentlyFragmentSubcomponentFactory(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl);
        }
      };
      this.notificationsFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_NotificationFragment.NotificationsFragmentSubcomponent.Factory get(
            ) {
          return new NotificationsFragmentSubcomponentFactory(kotlinSkillsComponentImpl, mainActivitySubcomponentImpl);
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectViewModelFactory(instance, kotlinSkillsComponentImpl.kotlinSkillsViewModelFactoryProvider.get());
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class KotlinSkillsComponentImpl implements KotlinSkillsComponent {
    private final KotlinSkillsComponentImpl kotlinSkillsComponentImpl = this;

    private Provider<ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Gson> gsonProvider;

    private Provider<Retrofit> provideRetrofiProvider;

    private Provider<ApiServices> provideApiServiceProvider;

    private Provider<ApiHelperImpl> apiHelperImplProvider;

    private Provider<ApiHelper> provideApiHelperProvider;

    private Provider<UsersRepositoryImpl> usersRepositoryImplProvider;

    private Provider<UsersRepository> usersRepositoryProvider;

    private Provider<NotificationViewModel> notificationViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<RequestsConcurrentlyViewModel> requestsConcurrentlyViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<KotlinSkillsViewModelFactory> kotlinSkillsViewModelFactoryProvider;

    private KotlinSkillsComponentImpl(RetrofitModule retrofitModuleParam,
        Context applicationContextParam) {

      initialize(retrofitModuleParam, applicationContextParam);

    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return Collections.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider));
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RetrofitModule retrofitModuleParam,
        final Context applicationContextParam) {
      this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory>() {
        @Override
        public ActivityBuilder_MainActivity.MainActivitySubcomponent.Factory get() {
          return new MainActivitySubcomponentFactory(kotlinSkillsComponentImpl);
        }
      };
      this.provideOkHttpClientProvider = DoubleCheck.provider(RetrofitModule_ProvideOkHttpClientFactory.create(retrofitModuleParam));
      this.gsonProvider = DoubleCheck.provider(RetrofitModule_GsonFactory.create(retrofitModuleParam));
      this.provideRetrofiProvider = DoubleCheck.provider(RetrofitModule_ProvideRetrofiFactory.create(retrofitModuleParam, provideOkHttpClientProvider, gsonProvider));
      this.provideApiServiceProvider = DoubleCheck.provider(RetrofitModule_ProvideApiServiceFactory.create(retrofitModuleParam, provideRetrofiProvider));
      this.apiHelperImplProvider = ApiHelperImpl_Factory.create(provideApiServiceProvider);
      this.provideApiHelperProvider = DoubleCheck.provider((Provider) apiHelperImplProvider);
      this.usersRepositoryImplProvider = UsersRepositoryImpl_Factory.create(provideApiHelperProvider);
      this.usersRepositoryProvider = DoubleCheck.provider((Provider) usersRepositoryImplProvider);
      this.notificationViewModelProvider = NotificationViewModel_Factory.create(usersRepositoryProvider);
      this.homeViewModelProvider = HomeViewModel_Factory.create(usersRepositoryProvider);
      this.requestsConcurrentlyViewModelProvider = RequestsConcurrentlyViewModel_Factory.create(usersRepositoryProvider);
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3).put(NotificationViewModel.class, ((Provider) notificationViewModelProvider)).put(HomeViewModel.class, ((Provider) homeViewModelProvider)).put(RequestsConcurrentlyViewModel.class, ((Provider) requestsConcurrentlyViewModelProvider)).build();
      this.kotlinSkillsViewModelFactoryProvider = DoubleCheck.provider(KotlinSkillsViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(MainApp application) {
      injectMainApp(application);
    }

    @Override
    public void inject(UsersRepository repository) {
    }

    private MainApp injectMainApp(MainApp instance) {
      MainApp_MembersInjector.injectDispatchingAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
