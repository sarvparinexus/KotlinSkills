// Generated by Dagger (https://dagger.dev).
package kotlins.skills.remember.useCase.Notification;

import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationsFragment_MembersInjector implements MembersInjector<NotificationsFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

  public NotificationsFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider) {
    this.dispatchingAndroidInjectorProvider = dispatchingAndroidInjectorProvider;
  }

  public static MembersInjector<NotificationsFragment> create(
      Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider) {
    return new NotificationsFragment_MembersInjector(dispatchingAndroidInjectorProvider);
  }

  @Override
  public void injectMembers(NotificationsFragment instance) {
    injectDispatchingAndroidInjector(instance, dispatchingAndroidInjectorProvider.get());
  }

  @InjectedFieldSignature("kotlins.skills.remember.useCase.Notification.NotificationsFragment.dispatchingAndroidInjector")
  public static void injectDispatchingAndroidInjector(NotificationsFragment instance,
      DispatchingAndroidInjector<Object> dispatchingAndroidInjector) {
    instance.dispatchingAndroidInjector = dispatchingAndroidInjector;
  }
}
