// Generated by Dagger (https://dagger.dev).
package kotlins.skills.remember.useCase.Notification;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlins.skills.remember.api.requests.repository.UsersRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationViewModel_Factory implements Factory<NotificationViewModel> {
  private final Provider<UsersRepository> userRepositoryProvider;

  public NotificationViewModel_Factory(Provider<UsersRepository> userRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public NotificationViewModel get() {
    return newInstance(userRepositoryProvider.get());
  }

  public static NotificationViewModel_Factory create(
      Provider<UsersRepository> userRepositoryProvider) {
    return new NotificationViewModel_Factory(userRepositoryProvider);
  }

  public static NotificationViewModel newInstance(UsersRepository userRepository) {
    return new NotificationViewModel(userRepository);
  }
}
