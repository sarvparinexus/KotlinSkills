// Generated by Dagger (https://dagger.dev).
package kotlins.skills.remember.useCase.Dashborad;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlins.skills.remember.api.requests.repository.UsersRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RequestsConcurrentlyViewModel_Factory implements Factory<RequestsConcurrentlyViewModel> {
  private final Provider<UsersRepository> usersRepositoryProvider;

  public RequestsConcurrentlyViewModel_Factory(Provider<UsersRepository> usersRepositoryProvider) {
    this.usersRepositoryProvider = usersRepositoryProvider;
  }

  @Override
  public RequestsConcurrentlyViewModel get() {
    return newInstance(usersRepositoryProvider.get());
  }

  public static RequestsConcurrentlyViewModel_Factory create(
      Provider<UsersRepository> usersRepositoryProvider) {
    return new RequestsConcurrentlyViewModel_Factory(usersRepositoryProvider);
  }

  public static RequestsConcurrentlyViewModel newInstance(UsersRepository usersRepository) {
    return new RequestsConcurrentlyViewModel(usersRepository);
  }
}
