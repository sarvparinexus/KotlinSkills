// Generated by Dagger (https://dagger.dev).
package com.example.template.di.modules;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideRetrofiFactory implements Factory<Retrofit> {
  private final RetrofitModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Gson> gsonProvider;

  public RetrofitModule_ProvideRetrofiFactory(RetrofitModule module,
      Provider<OkHttpClient> okHttpClientProvider, Provider<Gson> gsonProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofi(module, okHttpClientProvider.get(), gsonProvider.get());
  }

  public static RetrofitModule_ProvideRetrofiFactory create(RetrofitModule module,
      Provider<OkHttpClient> okHttpClientProvider, Provider<Gson> gsonProvider) {
    return new RetrofitModule_ProvideRetrofiFactory(module, okHttpClientProvider, gsonProvider);
  }

  public static Retrofit provideRetrofi(RetrofitModule instance, OkHttpClient okHttpClient,
      Gson gson) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofi(okHttpClient, gson));
  }
}
