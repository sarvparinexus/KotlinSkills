// Generated by Dagger (https://dagger.dev).
package com.example.template.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlins.skills.remember.api.requests.ApiClass.ApiServices;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideApiServiceFactory implements Factory<ApiServices> {
  private final RetrofitModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RetrofitModule_ProvideApiServiceFactory(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiServices get() {
    return provideApiService(module, retrofitProvider.get());
  }

  public static RetrofitModule_ProvideApiServiceFactory create(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RetrofitModule_ProvideApiServiceFactory(module, retrofitProvider);
  }

  public static ApiServices provideApiService(RetrofitModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideApiService(retrofit));
  }
}
